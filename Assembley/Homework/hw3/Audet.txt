#include <stdio.h>

int reg0, reg1, reg2, reg3, reg4, reg5, reg6, reg7, reg8, reg9;
int EQ, NEQ, LT, LTE, GT, GTE;

void comp(int a, int b)
{
    EQ = a == b;
    NEQ = a != b;
    LT = a < b;
    LTE = a <= b;
    GT = a > b;
    GTE = a >=b;
}

void search(void);

int X[] = {1, 3, 5, 7, 9, 0};

int main() {
    reg3 = 7;   // int key = 7;
    search();   // int index = search(key);
    printf("%d\n", reg0); // printf("%d\n", )

    return 0;
}

void search(void)
{
    reg0 = 0; // int i = 0;
    reg1 = 0; // int found = 0;
LOOP:
    // while (!found && X[i] != 0) , condition
    reg2 = X[reg0]; //  reg2  <- X[reg0]
    
    comp(reg1, 1);
    if (EQ) goto DONE; // while (!found)

    comp(reg2, 0);
    if (EQ) goto DONE; // while (X[i] != 0)

    comp(reg2, reg3); // reg3 stores the key value
    if (NEQ) goto ELSE;
    reg1 = 1; // found = 1
    goto LOOP;

ELSE:
    reg0 = reg0 + 1; // i++;
    goto LOOP;

ELSE2:
    reg0 = -1; // return -1

DONE:
    comp(reg1, 1);
    if(NEQ) goto ELSE2;
}

----------__________----------__________----------__________----------__________----------__________----------__________

.data
X: .word 1, 3, 5, 7, 9, 0 # X[] = {1,3,5,7,9,0}

.text
MAIN:
	li $t3, 7 	# int key = 7
	
	li $t0, 0	# int i = 0
	li $t1, 0	# int found = 0
	
	j SEARCH    # search(key)
	
EXIT:
	li $v0, 10
	syscall		# exit(0)
	
	
SEARCH:
	la $t2, X	#  reg2 = X[reg0]
	j LOOP

LOOP:	# void search(void) # while (!found && X[i] != 0){
	beq $t1, 1, DONE # if (found) 
	beq $t2, 0, DONE # if (X[i] == 0)
	
	mul $t5, $t0, 4 # (i*4)
	add $t2, $t2, $t5 # p = p + i
	lw  $t5, ($t2) 	# *p
	
	bne $t5, $t3, ELSE # if ( *p == key), inverse this cond.

	li $t1, 1	# found = 1
	j LOOP		# }

ELSE:
	add $t0, $t0, 1 # i = i + 1
	j LOOP 
	
ELSE2:
	li $t0, -1	# return -1
	li $v0, 1
	move $a0, $t0
	syscall
	
	li $v0, 10
	syscall 	# exit(0)

DONE:
	bne $t1, 1, ELSE2
	li $v0, 1
	move $a0, $t0	# printf("%d\n", index);
	syscall
	j EXIT
